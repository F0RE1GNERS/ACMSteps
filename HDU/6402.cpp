// [Auto Archived]
// Submit: 2018-08-17 13:48:03
// Time: 0MS
// Memory: 1384K

#include <bits/stdc++.h>
using namespace std;
using LL = long long;
#define FOR(i, x, y) for (decay<decltype(y)>::type i = (x), _##i = (y); i < _##i; ++i)
#define FORD(i, x, y) for (decay<decltype(x)>::type i = (x), _##i = (y); i > _##i; --i)
#ifdef zerol
#define dbg(args...) do { cout << "DEBUG: " << #args << " -> "; err(args); } while (0)
#else
#define dbg(...)
#endif
#ifdef ONLINE_JUDGE
#define assert(condition) if (!(condition)) { int x = 1, y = 0; cout << x / y << endl; }
#endif
void err() { cout << "" << endl; }
template<template<typename...> class T, typename t, typename... Args>
void err(T<t> a, Args... args) { for (auto x: a) cout << x << ' '; err(args...); }
template<typename T, typename... Args>
void err(T a, Args... args) { cout << a << ' '; err(args...); }
// -----------------------------------------------------------------------------

#define lcm LCM
/*

n = 20
partitions = IntegerPartitions[n];
cycles = Flatten[
   Table[{partitions[[i]], partitions[[j]]}, {i, 1, 
     Length[partitions]}, {j, 1, Length[partitions]}], 1];
Length[cycles]
c[p_] := Total[p]!/(Times @@ p)/(Times @@ 
    Map[Count[p, #]! &, Range[Total[p]]])
g[c_, k_] := 
 Times @@ Flatten[
   Table[2^(c[[i]]*k[[j]]/LCM[c[[i]], k[[j]]]), {i, 1, Length[c]}, {j,
      1, Length[k]}]]
flip[c_, k_] :=
 
 Flatten[Table[
   If[col == i, LCM[c[[i]], k[[j]]]/c[[i]], 
    If[col == Length[c] + j, LCM[c[[i]], k[[j]]]/k[[j]], 0]], {i, 1, 
    Length[c]}, {j, 1, Length[k]}, {col, 1, Length[c] + Length[k]}], 1]
h[c_, k_] := 2^(2 n - MatrixRank[flip[c, k], Modulus -> 2])
tot = Total[
  Map[c[#[[1]]]*c[#[[2]]]*h[#[[1]], #[[2]]]*g[#[[1]], #[[2]]] &, 
   cycles]]
G = (n!*2^n)^2
ans = tot/G

*/

const int N = 14, MOD = 998244353;

vector<pair<vector<int>, LL> > partitions[N];
LL inv[N], invf[N], fac[N];
LL lcm[N][N][N];

LL bin(LL x, LL n, LL MOD) {
    LL ret = MOD != 1;
    for (x %= MOD; n; n >>= 1, x = x * x % MOD)
        if (n & 1) ret = ret * x % MOD;
    return ret;
}
inline LL get_inv(LL x, LL p) { return bin(x, p - 2, p); }

void inv_init(LL n, LL p) {
    inv[1] = 1;
    FOR (i, 2, n)
        inv[i] = (p - p / i) * inv[p % i] % p;
}

void fac_inv_init(LL n, LL p) {
    fac[0] = 1;
    FOR (i, 1, n)
        fac[i] = i * fac[i - 1] % p;
    invf[n - 1] = bin(fac[n - 1], p - 2, p);
    FORD (i, n - 2, -1)
        invf[i] = invf[i + 1] * (i + 1) % p;
}

LL c(vector<int>& p, int s) {
    // s should be total of p
    static int counter[N]; memset(counter, 0, sizeof counter);
    LL res = fac[s];
    for (auto& v: p) { res = res * inv[v] % MOD; counter[v]++; }
    FOR (i, 1, s + 1) if (counter[i]) res = res * invf[counter[i]] % MOD;
    return res;
}

void dfs(vector<int>& p, int tot, int now, int start) {
    if (now == tot) {
        partitions[tot].emplace_back(p, c(p, tot));
        return;
    }
    FOR (i, start, tot + 1) {
        if (now + i <= tot) {
            p.push_back(i);
            dfs(p, tot, now + i, i);
            p.pop_back();
        }
    }
}

LL g(const vector<int> &p1, const vector<int>& p2, const vector<int>& p3) {
    LL res = 1;
    for (auto &x: p1) for (auto &y: p2) for (auto &z: p3)
        res = res * bin(2, x * y * z / lcm[x][y][z], MOD) % MOD;
    // dbg("g", res);
    return res;
}

LL h(const vector<int> &p1, const vector<int>& p2, const vector<int>& p3,
     int N, int M, int P) {
    int n = p1.size(), m = p2.size(), p = p3.size();
    vector<LL> mat(n * m * p, 0);
    FOR (i, 0, n) FOR (j, 0, m) FOR (k, 0, p) {
        int tot = lcm[p1[i]][p2[j]][p3[k]];
        int t1 = (tot / p1[i]) % 2, t2 = (tot / p2[j]) % 2, t3 = (tot / p3[k]) % 2;
        int row = i * m * p + j * p + k;
        // dbg(row, i, j, k, t1, t2, t3);
        if (t1) mat[row] |= 1LL << i;
        if (t2) mat[row] |= 1LL << (j + n);
        if (t3) mat[row] |= 1LL << (k + n + m);
    }

    // dbg(mat);

    int next = 0;
    FORD (digit, n + m + p - 1, -1) {
        int chosen = -1;
        FOR (i, next, n * m * p) 
            if ((1LL << digit) & mat[i]) {
                chosen = i; break;
            }
        if (chosen == -1) continue;
        // dbg(next, chosen);
        swap(mat[next], mat[chosen]);
        FOR (i, next + 1, n * m * p)
            if ((1LL << digit) & mat[i])
                mat[i] ^= mat[next];
        next++;
    }
    // dbg(next);

    // dbg("h", bin(2,n+m+p-next,MOD));

    return bin(2, N + M + P - next, MOD);
}

int table[][4] = {
    1, 1, 1, 1,
    1, 1, 2, 1,
    1, 1, 3, 1,
    1, 1, 4, 1,
    1, 1, 5, 1,
    1, 1, 6, 1,
    1, 1, 7, 1,
    1, 1, 8, 1,
    1, 1, 9, 1,
    1, 1, 10, 1,
    1, 1, 11, 1,
    1, 1, 12, 1,
    1, 1, 13, 1,
    1, 2, 2, 2,
    1, 2, 3, 2,
    1, 2, 4, 3,
    1, 2, 5, 3,
    1, 2, 6, 4,
    1, 2, 7, 4,
    1, 2, 8, 5,
    1, 2, 9, 5,
    1, 2, 10, 6,
    1, 2, 11, 6,
    1, 2, 12, 7,
    1, 2, 13, 7,
    1, 3, 3, 3,
    1, 3, 4, 5,
    1, 3, 5, 6,
    1, 3, 6, 9,
    1, 3, 7, 11,
    1, 3, 8, 15,
    1, 3, 9, 18,
    1, 3, 10, 23,
    1, 3, 11, 27,
    1, 3, 12, 34,
    1, 3, 13, 39,
    1, 4, 4, 12,
    1, 4, 5, 18,
    1, 4, 6, 35,
    1, 4, 7, 54,
    1, 4, 8, 94,
    1, 4, 9, 140,
    1, 4, 10, 224,
    1, 4, 11, 326,
    1, 4, 12, 495,
    1, 4, 13, 699,
    1, 5, 5, 39,
    1, 5, 6, 101,
    1, 5, 7, 228,
    1, 5, 8, 551,
    1, 5, 9, 1221,
    1, 5, 10, 2746,
    1, 5, 11, 5850,
    1, 5, 12, 12338,
    1, 5, 13, 24994,
    1, 6, 6, 388,
    1, 6, 7, 1343,
    1, 6, 8, 5083,
    1, 6, 9, 18366,
    1, 6, 10, 66524,
    1, 6, 11, 231189,
    1, 6, 12, 780372,
    1, 6, 13, 2526857,
    1, 7, 7, 8102,
    1, 7, 8, 53775,
    1, 7, 9, 355773,
    1, 7, 10, 2324945,
    1, 7, 11, 14591376,
    1, 7, 12, 87435412,
    1, 7, 13, 497713437,
    1, 8, 8, 656108,
    1, 8, 9, 8225529,
    1, 8, 10, 101773978,
    1, 8, 11, 207320173,
    1, 8, 12, 542253706,
    1, 8, 13, 152273544,
    1, 9, 9, 199727714,
    1, 9, 10, 798907278,
    1, 9, 11, 91057495,
    1, 9, 12, 813848092,
    1, 9, 13, 232646388,
    1, 10, 10, 88313343,
    1, 10, 11, 632295621,
    1, 10, 12, 236482846,
    1, 10, 13, 911369169,
    1, 11, 11, 148187021,
    1, 11, 12, 459487460,
    1, 11, 13, 813488021,
    1, 12, 12, 754553970,
    1, 12, 13, 868187417,
    1, 13, 13, 494867845,
    2, 2, 2, 9,
    2, 2, 3, 18,
    2, 2, 4, 48,
    2, 2, 5, 90,
    2, 2, 6, 189,
    2, 2, 7, 330,
    2, 2, 8, 603,
    2, 2, 9, 988,
    2, 2, 10, 1646,
    2, 2, 11, 2556,
    2, 2, 12, 3984,
    2, 2, 13, 5916,
    2, 3, 3, 100,
    2, 3, 4, 723,
    2, 3, 5, 4407,
    2, 3, 6, 25898,
    2, 3, 7, 135679,
    2, 3, 8, 653040,
    2, 3, 9, 2876537,
    2, 3, 10, 11749266,
    2, 3, 11, 44743253,
    2, 3, 12, 160129519,
    2, 3, 13, 541504546,
    2, 4, 4, 17796,
    2, 4, 5, 420203,
    2, 4, 6, 9058142,
    2, 4, 7, 171711989,
    2, 4, 8, 892511847,
    2, 4, 9, 683679580,
    2, 4, 10, 252164220,
    2, 4, 11, 227653633,
    2, 4, 12, 961165598,
    2, 4, 13, 247328377,
    2, 5, 5, 40001204,
    2, 5, 6, 384793227,
    2, 5, 7, 180896402,
    2, 5, 8, 475696436,
    2, 5, 9, 897370184,
    2, 5, 10, 962770118,
    2, 5, 11, 567450816,
    2, 5, 12, 947761787,
    2, 5, 13, 446932778,
    2, 6, 6, 354207717,
    2, 6, 7, 634573341,
    2, 6, 8, 792593876,
    2, 6, 9, 509851219,
    2, 6, 10, 579474838,
    2, 6, 11, 961112557,
    2, 6, 12, 173684071,
    2, 6, 13, 416057617,
    2, 7, 7, 466165789,
    2, 7, 8, 481746948,
    2, 7, 9, 978754807,
    2, 7, 10, 28213316,
    2, 7, 11, 527815547,
    2, 7, 12, 612079840,
    2, 7, 13, 621519245,
    2, 8, 8, 813018350,
    2, 8, 9, 580317931,
    2, 8, 10, 556446575,
    2, 8, 11, 535920671,
    2, 8, 12, 336916643,
    2, 8, 13, 738281289,
    2, 9, 9, 150958104,
    2, 9, 10, 694560537,
    2, 9, 11, 505394993,
    2, 9, 12, 751567483,
    2, 9, 13, 887256321,
    2, 10, 10, 995970597,
    2, 10, 11, 57007257,
    2, 10, 12, 131834440,
    2, 10, 13, 679697897,
    2, 11, 11, 662353125,
    2, 11, 12, 8873486,
    2, 11, 13, 41980885,
    2, 12, 12, 186465750,
    2, 12, 13, 229317141,
    2, 13, 13, 745907158,
    3, 3, 3, 5299,
    3, 3, 4, 322999,
    3, 3, 5, 16577725,
    3, 3, 6, 719758826,
    3, 3, 7, 973469847,
    3, 3, 8, 735501215,
    3, 3, 9, 429994741,
    3, 3, 10, 415050717,
    3, 3, 11, 694697004,
    3, 3, 12, 472931813,
    3, 3, 13, 585736115,
    3, 4, 4, 160249654,
    3, 4, 5, 624162787,
    3, 4, 6, 384304299,
    3, 4, 7, 449986513,
    3, 4, 8, 200910821,
    3, 4, 9, 665119136,
    3, 4, 10, 611926857,
    3, 4, 11, 456587640,
    3, 4, 12, 575560584,
    3, 4, 13, 197783988,
    3, 5, 5, 18909609,
    3, 5, 6, 525689003,
    3, 5, 7, 962569359,
    3, 5, 8, 439280481,
    3, 5, 9, 732361067,
    3, 5, 10, 215325665,
    3, 5, 11, 444659401,
    3, 5, 12, 45099058,
    3, 5, 13, 655991483,
    3, 6, 6, 59741193,
    3, 6, 7, 907464563,
    3, 6, 8, 595137955,
    3, 6, 9, 646534242,
    3, 6, 10, 675941304,
    3, 6, 11, 243881200,
    3, 6, 12, 332329847,
    3, 6, 13, 424273146,
    3, 7, 7, 467721127,
    3, 7, 8, 865752278,
    3, 7, 9, 722256448,
    3, 7, 10, 127383410,
    3, 7, 11, 358911065,
    3, 7, 12, 126551570,
    3, 7, 13, 378635468,
    3, 8, 8, 775277031,
    3, 8, 9, 876846666,
    3, 8, 10, 449219112,
    3, 8, 11, 772808234,
    3, 8, 12, 824681832,
    3, 8, 13, 574971384,
    3, 9, 9, 854959107,
    3, 9, 10, 632087074,
    3, 9, 11, 387455124,
    3, 9, 12, 748251987,
    3, 9, 13, 535582199,
    3, 10, 10, 342429500,
    3, 10, 11, 685932095,
    3, 10, 12, 492865926,
    3, 10, 13, 970165502,
    3, 11, 11, 753944170,
    3, 11, 12, 288231814,
    3, 11, 13, 529912087,
    3, 12, 12, 437314219,
    3, 12, 13, 15699762,
    3, 13, 13, 38253987,
    4, 4, 4, 191496630,
    4, 4, 5, 528602855,
    4, 4, 6, 552424096,
    4, 4, 7, 364792368,
    4, 4, 8, 792772864,
    4, 4, 9, 543542847,
    4, 4, 10, 489298976,
    4, 4, 11, 413105608,
    4, 4, 12, 76200788,
    4, 4, 13, 209215224,
    4, 5, 5, 713371652,
    4, 5, 6, 485877453,
    4, 5, 7, 122185444,
    4, 5, 8, 531736930,
    4, 5, 9, 418823815,
    4, 5, 10, 495471858,
    4, 5, 11, 601104538,
    4, 5, 12, 492116047,
    4, 5, 13, 16043783,
    4, 6, 6, 82746325,
    4, 6, 7, 697377748,
    4, 6, 8, 656946765,
    4, 6, 9, 137385853,
    4, 6, 10, 508654426,
    4, 6, 11, 867543108,
    4, 6, 12, 59426926,
    4, 6, 13, 9131311,
    4, 7, 7, 473020879,
    4, 7, 8, 985559646,
    4, 7, 9, 828727670,
    4, 7, 10, 905051227,
    4, 7, 11, 803646894,
    4, 7, 12, 378478852,
    4, 7, 13, 681378698,
    4, 8, 8, 583987036,
    4, 8, 9, 646277455,
    4, 8, 10, 882212759,
    4, 8, 11, 564831166,
    4, 8, 12, 978783460,
    4, 8, 13, 658301998,
    4, 9, 9, 901368404,
    4, 9, 10, 562977874,
    4, 9, 11, 572424115,
    4, 9, 12, 496974860,
    4, 9, 13, 612843067,
    4, 10, 10, 708658763,
    4, 10, 11, 504453880,
    4, 10, 12, 381171715,
    4, 10, 13, 934479007,
    4, 11, 11, 739651815,
    4, 11, 12, 221930014,
    4, 11, 13, 535931615,
    4, 12, 12, 247413584,
    4, 12, 13, 504172908,
    4, 13, 13, 156757508,
    5, 5, 5, 689142500,
    5, 5, 6, 120679090,
    5, 5, 7, 690187965,
    5, 5, 8, 739970652,
    5, 5, 9, 770710686,
    5, 5, 10, 608782504,
    5, 5, 11, 986279750,
    5, 5, 12, 827035518,
    5, 5, 13, 443017900,
    5, 6, 6, 335947096,
    5, 6, 7, 789807411,
    5, 6, 8, 783032169,
    5, 6, 9, 457484733,
    5, 6, 10, 671242338,
    5, 6, 11, 791731152,
    5, 6, 12, 825477955,
    5, 6, 13, 116722521,
    5, 7, 7, 654173203,
    5, 7, 8, 218161652,
    5, 7, 9, 440845596,
    5, 7, 10, 974962778,
    5, 7, 11, 507546710,
    5, 7, 12, 116897489,
    5, 7, 13, 655513366,
    5, 8, 8, 890232461,
    5, 8, 9, 104643372,
    5, 8, 10, 215902364,
    5, 8, 11, 222849854,
    5, 8, 12, 203949598,
    5, 8, 13, 539139940,
    5, 9, 9, 238821648,
    5, 9, 10, 278013639,
    5, 9, 11, 488266450,
    5, 9, 12, 503587204,
    5, 9, 13, 797308165,
    5, 10, 10, 685909658,
    5, 10, 11, 749102300,
    5, 10, 12, 337117435,
    5, 10, 13, 539781454,
    5, 11, 11, 348333054,
    5, 11, 12, 994388403,
    5, 11, 13, 954527119,
    5, 12, 12, 838230670,
    5, 12, 13, 468359580,
    5, 13, 13, 166444880,
    6, 6, 6, 659640482,
    6, 6, 7, 358957241,
    6, 6, 8, 859394513,
    6, 6, 9, 722122443,
    6, 6, 10, 729327717,
    6, 6, 11, 41846577,
    6, 6, 12, 110489202,
    6, 6, 13, 753560008,
    6, 7, 7, 15793731,
    6, 7, 8, 810008069,
    6, 7, 9, 820630700,
    6, 7, 10, 422265510,
    6, 7, 11, 687440790,
    6, 7, 12, 84652995,
    6, 7, 13, 109352517,
    6, 8, 8, 498338900,
    6, 8, 9, 66574123,
    6, 8, 10, 233887810,
    6, 8, 11, 41094973,
    6, 8, 12, 753761185,
    6, 8, 13, 837281854,
    6, 9, 9, 819543533,
    6, 9, 10, 181983037,
    6, 9, 11, 749598937,
    6, 9, 12, 7877175,
    6, 9, 13, 928375618,
    6, 10, 10, 355942354,
    6, 10, 11, 508666292,
    6, 10, 12, 869430340,
    6, 10, 13, 644325282,
    6, 11, 11, 384978960,
    6, 11, 12, 982178739,
    6, 11, 13, 408768210,
    6, 12, 12, 262876919,
    6, 12, 13, 682217440,
    6, 13, 13, 380807009,
    7, 7, 7, 853654981,
    7, 7, 8, 480099232,
    7, 7, 9, 497393988,
    7, 7, 10, 335958841,
    7, 7, 11, 615065214,
    7, 7, 12, 437885215,
    7, 7, 13, 480946357,
    7, 8, 8, 493611693,
    7, 8, 9, 542189621,
    7, 8, 10, 935114066,
    7, 8, 11, 480273892,
    7, 8, 12, 124478027,
    7, 8, 13, 797218834,
    7, 9, 9, 280740789,
    7, 9, 10, 640279553,
    7, 9, 11, 694329409,
    7, 9, 12, 415419575,
    7, 9, 13, 753511219,
    7, 10, 10, 334856653,
    7, 10, 11, 319879809,
    7, 10, 12, 408233288,
    7, 10, 13, 45953136,
    7, 11, 11, 14604210,
    7, 11, 12, 85502759,
    7, 11, 13, 629287329,
    7, 12, 12, 960773065,
    7, 12, 13, 140168879,
    7, 13, 13, 176400576,
    8, 8, 8, 374098275,
    8, 8, 9, 548399764,
    8, 8, 10, 165965908,
    8, 8, 11, 479187021,
    8, 8, 12, 789353786,
    8, 8, 13, 339124603,
    8, 9, 9, 362671801,
    8, 9, 10, 506034905,
    8, 9, 11, 719035307,
    8, 9, 12, 977165196,
    8, 9, 13, 394070679,
    8, 10, 10, 807140400,
    8, 10, 11, 612368678,
    8, 10, 12, 354694183,
    8, 10, 13, 143099854,
    8, 11, 11, 664181242,
    8, 11, 12, 116904910,
    8, 11, 13, 176977762,
    8, 12, 12, 850481177,
    8, 12, 13, 131329173,
    8, 13, 13, 308932023,
    9, 9, 9, 540632381,
    9, 9, 10, 168233444,
    9, 9, 11, 420543653,
    9, 9, 12, 82445615,
    9, 9, 13, 893250397,
    9, 10, 10, 303705898,
    9, 10, 11, 677573728,
    9, 10, 12, 575988465,
    9, 10, 13, 670765255,
    9, 11, 11, 89323741,
    9, 11, 12, 145116722,
    9, 11, 13, 612370395,
    9, 12, 12, 22540344,
    9, 12, 13, 156927607,
    9, 13, 13, 196914025,
    10, 10, 10, 671463150,
    10, 10, 11, 279082870,
    10, 10, 12, 876192746,
    10, 10, 13, 583061755,
    10, 11, 11, 215218966,
    10, 11, 12, 982885479,
    10, 11, 13, 708703877,
    10, 12, 12, 609288291,
    10, 12, 13, 115086899,
    10, 13, 13, 867379806,
    11, 11, 11, 523043603,
    11, 11, 12, 872771989,
    11, 11, 13, 581218429,
    11, 12, 12, 580072818,
    11, 12, 13, 467788521,
    11, 13, 13, 968092700,
    12, 12, 12, 673012249,
    12, 12, 13, 164703121,
    12, 13, 13, 925767095,
    13, 13, 13, 938796987
};

void ready() {
    int n, m, p;
    fac_inv_init(N, MOD);
    inv_init(N, MOD);
    FOR (i, 1, N) FOR (j, 1, N) FOR (k, 1, N) {
        lcm[i][j][k] = i * j / __gcd(i, j);
        lcm[i][j][k] = lcm[i][j][k] * k / __gcd(lcm[i][j][k], LL(k));
    }

    FOR (tot, 1, N) {
        vector<int> a;
        dfs(a, tot, 0, 1);
    }
    FOR (n, 1, 14) FOR (m, n, 14) FOR (p, m, 14) {
        LL ans = 0;
        for (auto& p1: partitions[n])
            for (auto& p2: partitions[m])
                for (auto& p3: partitions[p]) {
                    // dbg(p1.first);
                    // dbg(p2.first);
                    // dbg(p3.first);
                    // dbg(p1.second, p2.second, p3.second);
                    // dbg("...");
                    ans += p1.second * p2.second % MOD * p3.second % MOD
                        * h(p1.first, p2.first, p3.first, n, m, p) % MOD
                        * g(p1.first, p2.first, p3.first) % MOD;
                }
        LL g = fac[n] * fac[m] % MOD * fac[p] % MOD * bin(2, n + m + p, MOD) % MOD;
        dbg(ans, g);
        ans = ans % MOD * get_inv(g, MOD) % MOD;
        printf("%d %d %d %lld\n", n, m, p, ans);
        // cout << ans << endl;
    }
}

int main() {
    int T; cin >> T;
    int a[3];
    while (T--) {
        cin >> a[0] >> a[1] >> a[2];
        sort(a, a + 3);
        for (int i = 0; ; ++i) {
            if (table[i][0] == a[0] && table[i][1] == a[1] && table[i][2] == a[2]) {
                printf("%d\n", table[i][3]);
                break;
            }
        }
    }
}